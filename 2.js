// Generated by CoffeeScript 1.3.3
(function() {
  var MAGIC_TEXT_LENGTH, PREFERRED_FONT_SIZE, getElemFontSize, getLongElemInfos, getMainFontSize, getTextLength, magicZoom;

  MAGIC_TEXT_LENGTH = 30;

  PREFERRED_FONT_SIZE = 18;

  getTextLength = function(elem) {
    var node, totalLength, _i, _len, _ref;
    totalLength = 0;
    _ref = elem.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      if (node.nodeType === Node.TEXT_NODE) {
        totalLength += node.textContent.length;
      }
    }
    return totalLength;
  };

  getLongElemInfos = function() {
    var longElemInfos, p, paragraphs, textLen, _i, _len;
    longElemInfos = [];
    paragraphs = document.getElementsByTagName("p");
    for (_i = 0, _len = paragraphs.length; _i < _len; _i++) {
      p = paragraphs[_i];
      textLen = getTextLength(p);
      if (textLen > MAGIC_TEXT_LENGTH) {
        longElemInfos.push({
          elem: p,
          length: textLen
        });
      }
    }
    console.log(longElemInfos);
    return longElemInfos;
  };

  getElemFontSize = function(el) {
    if (document.defaultView && document.defaultView.getComputedStyle) {
      return document.defaultView.getComputedStyle(el, null).getPropertyValue("font-size");
    } else {
      return el.style["fontSize"];
    }
  };

  getMainFontSize = function() {
    var alreadyIn, longElem, longElemInfo, longElemInfos, maxLen, nodeInfo, parentNodeInfo, parentNodeInfos, theSample, _i, _j, _k, _len, _len1, _len2;
    longElemInfos = getLongElemInfos();
    parentNodeInfos = [];
    for (_i = 0, _len = longElemInfos.length; _i < _len; _i++) {
      longElemInfo = longElemInfos[_i];
      longElem = longElemInfo.elem;
      alreadyIn = false;
      for (_j = 0, _len1 = parentNodeInfos.length; _j < _len1; _j++) {
        nodeInfo = parentNodeInfos[_j];
        if (nodeInfo.node === longElem.parentNode) {
          alreadyIn = true;
          nodeInfo.count++;
          nodeInfo.length += longElemInfo.length;
        }
      }
      if (!alreadyIn) {
        parentNodeInfo = {
          node: longElem.parentNode,
          sample: longElem,
          count: 1,
          length: longElemInfo.length
        };
        parentNodeInfos.push(parentNodeInfo);
      }
    }
    console.log(parentNodeInfos);
    maxLen = 0;
    for (_k = 0, _len2 = parentNodeInfos.length; _k < _len2; _k++) {
      parentNodeInfo = parentNodeInfos[_k];
      if (parentNodeInfo.length > maxLen) {
        maxLen = parentNodeInfo.length;
        theSample = parentNodeInfo.sample;
      }
    }
    console.log(theSample);
    return parseFloat(getElemFontSize(theSample));
  };

  magicZoom = function() {
    var zoom;
    zoom = PREFERRED_FONT_SIZE / getMainFontSize();
    return document.body.style.zoom = zoom;
  };

  magicZoom();

}).call(this);
